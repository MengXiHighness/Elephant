<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DefaultTextLoggerPattern" xml:space="preserve">
    <value>{1}: {2}. Priority: {3}. Time stamp:{0:u}.</value>
  </data>
  <data name="DependencyForUnknownModule" xml:space="preserve">
    <value>Could not add the dependency relationship of the unknown module {0}</value>
  </data>
  <data name="DependencyOnMissingModule" xml:space="preserve">
    <value>The definition of a module depends on another module that does not define the load.: {0}</value>
  </data>
  <data name="DirectoryNotFound" xml:space="preserve">
    <value>Not found directory{0}</value>
  </data>
  <data name="DuplicatedModule" xml:space="preserve">
    <value>The loader has found the name replication module for {0}</value>
  </data>
  <data name="DuplicatedModuleGroup" xml:space="preserve">
    <value>The loader has found a group of {0} replication module</value>
  </data>
  <data name="FailedToLoadModule" xml:space="preserve">
    <value>An exception occurred during the initialization module {0}.
     - Exception message：{2}
    - The module tries to load the assembly：{1}
  Check for more information on the exception of the InnerException property. If an exception occurs in the process of creating an DI container, you can call.GetRootException () method to help find the root cause of the problem.
  </value>
  </data>
  <data name="FailedToLoadModuleNoAssemblyInfo" xml:space="preserve">
    <value>An exception occurred during the initialization module {0}.
     - Exception message：{1}
 Check for more information on the exception of the InnerException property. If an exception occurs in the process of creating an DI container, you can call.GetRootException () method to help find the root cause of the problem.</value>
  </data>
  <data name="InvalidArgumentAssemblyUri" xml:space="preserve">
    <value>Parameters must be an effective absolute URI for a program set file</value>
  </data>
  <data name="FailedToRetrieveModule" xml:space="preserve">
    <value>Unable to load module type{0}。

If this error occurs when using MEF in the Silverlight application, make sure that the CopyLocal property of the MefExtensions assembly of the master program is True, while the other assemblies are False.

Error is：{1}</value>
  </data>
  <data name="InvalidDelegateRerefenceTypeException" xml:space="preserve">
    <value>The goal to achieve the IDelegateReference interface should be type {0}.</value>
  </data>
  <data name="ModuleNotFound" xml:space="preserve">
    <value>Not found in the same directory{0}</value>
  </data>
  <data name="ModuleTypeNotFound" xml:space="preserve">
    <value>Cannot load {0} type in assembly {1}.</value>
  </data>
  <data name="NoRetrieverCanRetrieveModule" xml:space="preserve">
    <value>The module type loader retrieves the specified module can not present in the module manager.</value>
  </data>
  <data name="RegionNotFound" xml:space="preserve">
    <value>RegionManager does not contain a region named {0}.</value>
  </data>
  <data name="StringCannotBeNullOrEmpty" xml:space="preserve">
    <value>The supplied string parameter {0} cannot be null or null</value>
  </data>
  <data name="ModuleDependenciesNotMetInGroup" xml:space="preserve">
    <value>Module {0} depends on other modules that are not in the same group.</value>
  </data>
  <data name="RegionManagerWithDifferentNameException" xml:space="preserve">
    <value>This area has already added a name to "{0}", and cannot be added to a different name ('{1}') in the area management.</value>
  </data>
  <data name="StartupModuleDependsOnAnOnDemandModule" xml:space="preserve">
    <value>When the application starts, the tag module is automatically initialized with the {0}, but the module depends on some modules that are required to initialize the tag. To resolve this error, set up the module property InitializationMode=WhenAvailable, or delete the validation extension method in the ModuleCatalog class.
</value>
  </data>
  <data name="ModulePathCannotBeNullOrEmpty" xml:space="preserve">
    <value>Module path cannot be null or empty.</value>
  </data>
  <data name="IEnumeratorObsolete" xml:space="preserve">
    <value>The IModuleEnumerator interface is obsolete and no longer be used. Please use ModuleCatalog instead.</value>
  </data>
  <data name="ConfigurationStoreCannotBeNull" xml:space="preserve">
    <value>ConfigurationStore can not be null</value>
  </data>
  <data name="CyclicDependencyFound" xml:space="preserve">
    <value>The module directory has been found to have at least one cycle dependent. Module cycle dependence is prohibited.
</value>
  </data>
  <data name="FailedToGetType" xml:space="preserve">
    <value>Cannot retrieve module type {0} from the loaded assembly. You may need to specify a fully qualified type name</value>
  </data>
  <data name="ValueMustBeOfTypeModuleInfo" xml:space="preserve">
    <value>The value must be ModuleInfo type.</value>
  </data>
  <data name="AdapterInvalidTypeException" xml:space="preserve">
    <value>Object type must be'{0}'to adapt to the current adaptation range.</value>
  </data>
  <data name="CannotChangeRegionNameException" xml:space="preserve">
    <value>The current regional name is' {0}', which can't be changed again.</value>
  </data>
  <data name="CannotRegisterCompositeCommandInItself" xml:space="preserve">
    <value>Could not register CompositeCommand itself.</value>
  </data>
  <data name="CannotRegisterSameCommandTwice" xml:space="preserve">
    <value>The same command is not registered in the same CompositeCommand two times.</value>
  </data>
  <data name="CanOnlyAddTypesThatInheritIFromRegionBehavior" xml:space="preserve">
    <value>Type '{0}' does not implement the IRegionBehavior interface.</value>
  </data>
  <data name="ContentControlHasContentException" xml:space="preserve">
    <value>The content in ContentControl cannot be empty.
This control is associated with a region, but it has been bound to something else. If you do not explicitly set the contents of the control attribute, this may cause regionmanager inherited the attached property value changes.</value>
  </data>
  <data name="DeactiveNotPossibleException" xml:space="preserve">
    <value>Stop activities in this type of area.</value>
  </data>
  <data name="DelegateCommandDelegatesCannotBeNull" xml:space="preserve">
    <value>ExecuteMethod and canExecuteMethod can not be null.</value>
  </data>
  <data name="HostControlCannotBeNull" xml:space="preserve">
    <value>Run time HostControl can not be null value.</value>
  </data>
  <data name="HostControlCannotBeSetAfterAttach" xml:space="preserve">
    <value>After the Attach method is called, the HostControl property cannot be set.</value>
  </data>
  <data name="HostControlMustBeATabControl" xml:space="preserve">
    <value>HostControl type must be a TabControl.</value>
  </data>
  <data name="ItemsControlHasItemsSourceException" xml:space="preserve">
    <value>ItemsSource's ItemsControl property is not available.
  This control is associated with a region, but it has been bound to something else. If you do not explicitly set control ItemSource attribute and of the anomalies may cause regionmanager inherited the attached property value changes.</value>
  </data>
  <data name="MappingExistsException" xml:space="preserve">
    <value>Given mapping type: {0}, already registered.</value>
  </data>
  <data name="OnViewRegisteredException" xml:space="preserve">
    <value>The view is added to the area '{0}' when an exception occurs.
    -  Most likely to cause abnormal：“{1}”。
    You can also check for more information on the exception's InnerException property, or call.GetRootException () method</value>
  </data>
  <data name="RegionBehaviorAttachCannotBeCallWithNullRegion" xml:space="preserve">
    <value>When the Region property is empty, the Attach method cannot be invoked.</value>
  </data>
  <data name="RegionBehaviorRegionCannotBeSetAfterAttach" xml:space="preserve">
    <value>After the Attach method is called, the Region property cannot be set.</value>
  </data>
  <data name="RegionCreationException" xml:space="preserve">
    <value>Create an exception for a zone name'{0}. The only exceptions are：{1}。</value>
  </data>
  <data name="RegionNameCannotBeEmptyException" xml:space="preserve">
    <value>The area name cannot be null or empty.</value>
  </data>
  <data name="RegionNameExistsException" xml:space="preserve">
    <value>Given the name of the region has been registered: {0}</value>
  </data>
  <data name="RegionNotInRegionManagerException" xml:space="preserve">
    <value>RegionManager does not include the {0} region</value>
  </data>
  <data name="RegionViewExistsException" xml:space="preserve">
    <value>Existing views in the area</value>
  </data>
  <data name="RegionViewNameExistsException" xml:space="preserve">
    <value>The view name already exists in the area’{0}‘</value>
  </data>
  <data name="TypeWithKeyNotRegistered" xml:space="preserve">
    <value>The primary key is' {0} 'BehaviorType</value>
  </data>
  <data name="UpdateRegionException" xml:space="preserve">
    <value>A exception has occurred while trying to create a regional object.
-The most likely exception is:：'{0}“。
For more information, please check InnerExceptions, or call.GetRootException.</value>
  </data>
  <data name="ValueNotFound" xml:space="preserve">
    <value>Not found{0}</value>
  </data>
  <data name="ViewNotInRegionException" xml:space="preserve">
    <value>The area does not contain the specified view</value>
  </data>
  <data name="PropertySupport_NotMemberAccessExpression_Exception" xml:space="preserve">
    <value>Expression is not a member access expression.</value>
  </data>
  <data name="PropertySupport_ExpressionNotProperty_Exception" xml:space="preserve">
    <value>Member access expression does not support property access.</value>
  </data>
  <data name="PropertySupport_StaticExpression_Exception" xml:space="preserve">
    <value>Reference property is a static property.</value>
  </data>
  <data name="CannotCreateNavigationTarget" xml:space="preserve">
    <value>Could not create a navigation target'{0}'</value>
  </data>
  <data name="NavigationInProgress" xml:space="preserve">
    <value>Navigation already exists in the process area, the name is‘{0}</value>
  </data>
  <data name="NavigationServiceHasNoRegion" xml:space="preserve">
    <value>Navigation cannot continue until the area is set to RegionNavigationService</value>
  </data>
  <data name="DelegateCommandInvalidGenericPayloadType" xml:space="preserve">
    <value> Generic of type DelegateCommand &lt;T&gt; is neither an object nor a nullable type.</value>
  </data>
  <data name="NoRegionAdapterException" xml:space="preserve">
    <value>The type IRegionAdapter {0} interface is not registered with the region adaptation map. In the pre load program, you can register the IRegionAdapter interface by overriding the ConfigureRegionAdapterMappings method.</value>
  </data>
  <data name="BindingNotFoundException" xml:space="preserve">
    <value>Plug in service configuration is incorrect.</value>
  </data>
  <data name="BootstrapperRunCompleted" xml:space="preserve">
    <value>Pre load program has been completed.</value>
  </data>
  <data name="ConfigureContainerBegin" xml:space="preserve">
    <value>Configure the container to start running.</value>
  </data>
  <data name="ConfigureContainerEnd" xml:space="preserve">
    <value>Configuration container end run.</value>
  </data>
  <data name="ConfigureDefaultRegionBehaviorsBegin" xml:space="preserve">
    <value>Configure default behavior for the region to begin.</value>
  </data>
  <data name="ConfigureDefaultRegionBehaviorsEnd" xml:space="preserve">
    <value>The end of the behavior of the default zone.</value>
  </data>
  <data name="ConfigureRegionAdapterMappingsBegin" xml:space="preserve">
    <value>Configure adapter map area to start.</value>
  </data>
  <data name="ConfigureRegionAdapterMappingsEnd" xml:space="preserve">
    <value>Configuration adapter map area end.</value>
  </data>
  <data name="ConfiguringModuleCatalogBegin" xml:space="preserve">
    <value>Configuration module directory.</value>
  </data>
  <data name="ConfiguringModuleCatalogEnd" xml:space="preserve">
    <value>Configuration module directory end.</value>
  </data>
  <data name="ConfiguringServiceLocatorSingletonBegin" xml:space="preserve">
    <value>The allocation of the singleton service loader to start.</value>
  </data>
  <data name="ConfiguringServiceLocatorSingletonEnd" xml:space="preserve">
    <value>The allocation of the singleton service end loader.</value>
  </data>
  <data name="ConfiguringSpringContainerBegin" xml:space="preserve">
    <value>Configure Spring container to start.</value>
  </data>
  <data name="ConfiguringSpringContainerEnd" xml:space="preserve">
    <value>Configure Spring container end.</value>
  </data>
  <data name="ContainerInitializeException" xml:space="preserve">
    <value>Container initialization exception.</value>
  </data>
  <data name="CreatingModuleCatalogBegin" xml:space="preserve">
    <value>Create the module directory to start.</value>
  </data>
  <data name="CreatingModuleCatalogEnd" xml:space="preserve">
    <value>Create module directory end.</value>
  </data>
  <data name="CreatingSpringContainerBegin" xml:space="preserve">
    <value>Create the Spring container to start.</value>
  </data>
  <data name="CreatingSpringContainerEnd" xml:space="preserve">
    <value>Create Spring container end.</value>
  </data>
  <data name="DelegateCommandDelegatesCannDeactiveNotPossibleException" xml:space="preserve">
    <value>DeactiveNotPossibleException</value>
  </data>
  <data name="InitializingModulesBegin" xml:space="preserve">
    <value>Initialization module.</value>
  </data>
  <data name="InitializingModulesEnd" xml:space="preserve">
    <value>Initialization module end.</value>
  </data>
  <data name="LoggerCreatedSuccessfully" xml:space="preserve">
    <value>Log creation success.</value>
  </data>
  <data name="NullLoggerFacadeException" xml:space="preserve">
    <value>Create log exception.</value>
  </data>
  <data name="NullModuleCatalogException" xml:space="preserve">
    <value>ModuleCatalog is an empty exception.</value>
  </data>
  <data name="NullUnityContainerException" xml:space="preserve">
    <value>The same container is null exception.</value>
  </data>
  <data name="PreInitializeModulesBegin" xml:space="preserve">
    <value>Pre initialization module.</value>
  </data>
  <data name="PreInitializeModulesEnd" xml:space="preserve">
    <value>End of pre initialization module.</value>
  </data>
  <data name="RegisteringFrameworkExceptionTypesBegin" xml:space="preserve">
    <value>Register frame exception type start.</value>
  </data>
  <data name="RegisteringFrameworkExceptionTypesEnd" xml:space="preserve">
    <value>The end of the abnormal type of registration framework.</value>
  </data>
  <data name="ServiceContractNotFoundException" xml:space="preserve">
    <value>Failed to find the {0} service contract interface type.</value>
  </data>
  <data name="WCFHostException" xml:space="preserve">
    <value>WCF host anomaly.</value>
  </data>
  <data name="WCFServiceCreateException" xml:space="preserve">
    <value>Create WCF service exception.</value>
  </data>
</root>